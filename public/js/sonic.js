// Assuming chat UI already exists; extend Sonic: async function sonicApi(path, payload) { const token = localStorage.getItem('token'); return fetch(path, { method: 'POST', headers: { 'Content-Type': 'application/json', ...(token ? { Authorization: `Bearer ${token}` } : {}) }, body: JSON.stringify(payload) }).then(r => r.json()); } // Trigger referral via chat async function sonicSubmitReferral(email) { const res = await sonicApi('/api/referrals', { referredEmail: email }); return res.ok ? 'Referral recorded! Once they complete 3 projects in 3 months and you reach 9, you’ll earn a free Mastered Master.' : 'Could not record referral.'; } // Sonic commands const sonicCommands = { 'refer': async (msg) => { const email = (msg.match(/[^\s@]+@[^\s@]+\.[^\s@]+/)||[])[0]; if (!email) return 'Please provide your friend’s email to log the referral.'; return await sonicSubmitReferral(email); }, 'dashboard': () => 'Open your dashboard to track progress, payments, and consultations: /dashboard', 'eligibility': async () => { const token = localStorage.getItem('token'); if (!token) return 'Log in to check eligibility.'; const res = await fetch('/api/referrals/eligibility', { headers: { Authorization: `Bearer ${token}` } }).then(r=>r.json()); return res.eligible ? 'You are eligible for a free Mastered Master!' : 'Not eligible yet — keep going!'; } }; // Wire into existing chat send flow async function sonicHandleMessage(text) { if (/refer/i.test(text)) return await sonicCommands['refer'](text); if (/dashboard/i.test(text)) return sonicCommands['dashboard'](); if (/eligible|eligibility/i.test(text)) return await sonicCommands['eligibility'](); return null; // let AI engine handle the rest } 
